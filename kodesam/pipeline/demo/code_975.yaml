Certainly! Below is an example of a Kubernetes YAML file that includes the necessary resources for creating an ELK (Elasticsearch, Logstash, Kibana) cluster, including ClusterRole, RoleBinding, namespace, Deployment, Secrets, ConfigMap, Service, and Route:

```yaml
# Create the namespace
apiVersion: v1
kind: Namespace
metadata:
  name: elk-cluster

# Create the ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: elk-cluster-role
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "watch", "list"]
- apiGroups: ["extensions"]
  resources: ["deployments"]
  verbs: ["get", "watch", "list"]

# Create the RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: elk-cluster-binding
  namespace: elk-cluster
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: elk-cluster-role
subjects:
- kind: ServiceAccount
  name: elk-cluster
  namespace: elk-cluster

# Create the Elasticsearch Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: elasticsearch-deployment
  namespace: elk-cluster
spec:
  replicas: 1
  selector:
    matchLabels:
      app: elasticsearch
  template:
    metadata:
      labels:
        app: elasticsearch
    spec:
      containers:
        - name: elasticsearch
          image: elasticsearch:7.7.0
          ports:
            - containerPort: 9200
          env:
          - name: discovery.type
            value: single-node
          resources:
            limits:
              cpu: "1"
              memory: "1Gi"
            requests:
              cpu: "500m"
              memory: "512Mi"

# Create the Logstash Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: logstash-deployment
  namespace: elk-cluster
spec:
  replicas: 1
  selector:
    matchLabels:
      app: logstash
  template:
    metadata:
      labels:
        app: logstash
    spec:
      containers:
        - name: logstash
          image: logstash:7.7.0
          ports:
            - containerPort: 5000
          volumeMounts:
            - name: config-volume
              mountPath: /usr/share/logstash/pipeline/
      volumes:
        - name: config-volume
          configMap:
            name: logstash-configmap

# Create the Kibana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kibana-deployment
  namespace: elk-cluster
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kibana
  template:
    metadata:
      labels:
        app: kibana
    spec:
      containers:
        - name: kibana
          image: kibana:7.7.0
          ports:
            - containerPort: 5601

# Create the Secrets for Elasticsearch
apiVersion: v1
kind: Secret
metadata:
  name: elasticsearch-secrets
  namespace: elk-cluster
data:
  username: <base64-encoded-username>
  password: <base64-encoded-password>

# Create the ConfigMap for Logstash
apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-configmap
  namespace: elk-cluster
data:
  logstash.conf: |
    input {
      tcp {
        port => 5000
        codec => json_lines
      }
    }
    output {
      elasticsearch {
        hosts => ["elasticsearch-deployment:9200"]
        index => "logs-%{+YYYY.MM.dd}"
      }
    }

# Create the Service for Elasticsearch
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch-service
  namespace: elk-cluster
spec:
  selector:
    app: elasticsearch
  ports:
    - protocol: TCP
      port: 9200

# Create the Service for Logstash
apiVersion: v1
kind: Service
metadata:
  name: logstash-service
  namespace: elk-cluster
spec:
  selector:
    app: logstash
  ports:
    - protocol: TCP
      port: 5000

# Create the Service for Kibana
apiVersion: v1
kind: Service
metadata:
  name: kibana-service
  namespace: elk-cluster
spec:
  selector:
    app: kibana
  ports:
    - protocol: TCP
      port: 5601

# Create the Route for accessing Kibana externally
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: kibana-route
  namespace: elk-cluster
spec:
  host: kibana.example.com
  to:
    kind: Service
    name: kibana-service
  port:
    targetPort: 5601
```

Make sure to replace `<base64-encoded-username>` and `<base64-encoded-password>` in the `elasticsearch-secrets` section with your actual Elasticsearch credentials, base64 encoded.

Save the above YAML content into a file, e.g., `elk-cluster.yaml`, and then deploy it to your Kubernetes cluster using the following command:

```bash
kubectl apply -f elk-cluster.yaml
```

This will create your ELK cluster with the specified resources in the `elk-cluster` namespace. Please note that you may need to adjust the configurations according to your specific requirements and environment.