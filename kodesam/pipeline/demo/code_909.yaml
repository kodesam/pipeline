Certainly! Below is an example of an Ansible playbook utilizing jinja2 templates to deploy an ELK cluster with the mentioned components:

**Step 1: Create the inventory file**

Create an inventory file named `inventory.yml` with the following content:

```yaml
all:
  hosts:
    elk-master:
      ansible_host: ELK_MASTER_IP
    elk-slave:
      ansible_host: ELK_SLAVE_IP
```

Replace `ELK_MASTER_IP` and `ELK_SLAVE_IP` with the actual IP addresses of your ELK master and slave machines.

**Step 2: Create the playbook file**

Create a playbook file named `elk_cluster_deployment.yml` with the following content:

```yaml
---
- name: Deploy ELK Cluster
  hosts: all
  become: true

  vars:
    elk_version: "7.10.1"

  tasks:
    - name: Prepare ELK cluster role and role binding
      template:
        src: templates/elk-cluster-role.yml.j2
        dest: /tmp/elk-cluster-role.yml

    - name: Apply ELK cluster role and role binding
      command: kubectl apply -f /tmp/elk-cluster-role.yml
      delegate_to: localhost

    - name: Create ELK namespace
      template:
        src: templates/elk-namespace.yml.j2
        dest: /tmp/elk-namespace.yml

    - name: Apply ELK namespace
      command: kubectl apply -f /tmp/elk-namespace.yml
      delegate_to: localhost

    - name: Prepare ELK deployment
      template:
        src: templates/elk-deployment.yml.j2
        dest: /tmp/elk-deployment.yml

    - name: Apply ELK deployment
      command: kubectl apply -f /tmp/elk-deployment.yml
      delegate_to: localhost

    - name: Prepare ELK service
      template:
        src: templates/elk-service.yml.j2
        dest: /tmp/elk-service.yml

    - name: Apply ELK service
      command: kubectl apply -f /tmp/elk-service.yml
      delegate_to: localhost

    - name: Prepare ELK route and ingress
      template:
        src: templates/elk-route-ingress.yml.j2
        dest: /tmp/elk-route-ingress.yml

    - name: Apply ELK route and ingress
      command: kubectl apply -f /tmp/elk-route-ingress.yml
      delegate_to: localhost

  post_tasks:
    - name: Clean up temporary files
      file:
        path: /tmp/elk-*
        state: absent
```

**Step 3: Create the Jinja2 templates folder**

Create a folder named `templates` in the same directory as the playbook file.

**Step 4: Create the Jinja2 template files**

Inside the `templates` folder, create the following Jinja2 template files:

1. `elk-cluster-role.yml.j2`:

```yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: elk-cluster-role
rules:
  - apiGroups: [""]
    resources: ["pods", "services", "configmaps"]
    verbs: ["get", "watch", "list", "create", "update"]
  # Add more rules as needed
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: elk-cluster-rolebinding
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: elk-cluster-role
subjects:
  - kind: ServiceAccount
    name: default
    namespace: default
```

2. `elk-namespace.yml.j2`:

```yaml
apiVersion: v1
kind: Namespace
metadata:
  name: elk
```

3. `elk-deployment.yml.j2` (replace `ELK_IMAGE_NAME` and `ELK_IMAGE_TAG` with your preferred ELK image and version):

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: elk-deployment
  namespace: elk
spec:
  replicas: 1
  selector:
    matchLabels:
      app: elk
  template:
    metadata:
      labels:
        app: elk
    spec:
      containers:
        - name: elk
          image: ELK_IMAGE_NAME:ELK_IMAGE_TAG
          ports:
            - containerPort: 5601
            - containerPort: 9200
```

4. `elk-service.yml.j2`:

```yaml
apiVersion: v1
kind: Service
metadata:
  name: elk-service
  namespace: elk
spec:
  selector:
    app: elk
  ports:
    - protocol: TCP
      port: 80
      targetPort: 5601
      name: kibana
    - protocol: TCP
      port: 9200
      targetPort: 9200
      name: elasticsearch
  type: ClusterIP
```

5. `elk-route-ingress.yml.j2`:

```yaml
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: elk-route
  namespace: elk
spec:
  to:
    kind: Service
    name: elk-service
  port:
    targetPort: kibana
  wildcardPolicy: None
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: elk-ingress
  namespace: elk
spec:
  rules:
    - host: elk.example.com # Replace with your desired domain
      http:
        paths:
          - path: /
            backend:
              serviceName: elk-service
              servicePort: 5601
```

**Step 5: Run the playbook**

Execute the playbook using the following command:

```bash
ansible-playbook -i inventory.yml elk_cluster_deployment.yml
```

Ensure that you have Ansible installed and configured to manage the ELK cluster machines.

This playbook will create the necessary resources for an ELK cluster deployment, including the secrets, cluster role, role binding, namespace, deployment, config map, service, route, and ingress. The templates provide placeholders for specific values like image name, image tag, domain, etc., that you can update according to your requirements.