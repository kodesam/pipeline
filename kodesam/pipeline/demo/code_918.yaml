Sure! Here is an example of an Ansible playbook that can be used to launch EC2 instances on AWS Cloud, configure OpenShift master and worker nodes separately, and create WordPress and MySQL pods with services:


---
- name: Provision EC2 instances and configure OpenShift
  hosts: localhost
  gather_facts: no
  vars:
    aws_access_key: YOUR_AWS_ACCESS_KEY
    aws_secret_key: YOUR_AWS_SECRET_KEY
    aws_region: YOUR_AWS_REGION
    openshift_user: YOUR_OPENSHIFT_USER
    openshift_password: YOUR_OPENSHIFT_PASSWORD
    openshift_master_role: openshift-master
    openshift_worker_role: openshift-worker

  tasks:
    - name: Launch EC2 instances
      ec2:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ aws_region }}"
        instance_type: t2.micro
        key_name: my_key
        image: ami-XXXXXXXX
        count: 1
        instance_tags:
          Name: "{{ openshift_master_role }}"
        wait: true
        assign_public_ip: true
        group: my_security_group
      register: master

    - name: Configure OpenShift master node
      become: yes
      remote_user: ec2-user
      hosts: "{{ master.instance_ids }}"
      roles:
        - openshift-master

    - name: Launch EC2 instances
      ec2:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        region: "{{ aws_region }}"
        instance_type: t2.micro
        key_name: my_key
        image: ami-XXXXXXXX
        count: 3
        instance_tags:
          Name: "{{ openshift_worker_role }}"
        wait: true
        assign_public_ip: true
        group: my_security_group
      register: workers

    - name: Configure OpenShift worker nodes
      become: yes
      remote_user: ec2-user
      hosts: "{{ workers.instance_ids }}"
      roles:
        - openshift-worker

    - name: Create WordPress and MySQL pods
      become: yes
      remote_user: root
      hosts: "{{ groups['openshift-master'] }}"
      vars:
        openshift_url: "https://openshift.example.com:8443"
      tasks:
        - name: Login to OpenShift
          uri:
            url: "{{ openshift_url }}/oapi/v1/users/login"
            method: POST
            body: "username={{ openshift_user }}&password={{ openshift_password }}"
            return_content: yes
            status_code: 200
          register: login_result

        - name: Create MySQL pod
          openshift_v1_pod:
            api_url: "{{ openshift_url }}"
            oc_token: "{{ login_result.cookies['oauth_token'] }}"
            oc_username: "{{ openshift_user }}"
            oc_password: "{{ openshift_password }}"
            kind: Pod
            name: mysql
            namespace: default
            image: mysql
          register: mysql_pod

        - name: Create WordPress pod
          openshift_v1_pod:
            api_url: "{{ openshift_url }}"
            oc_token: "{{ login_result.cookies['oauth_token'] }}"
            oc_username: "{{ openshift_user }}"
            oc_password: "{{ openshift_password }}"
            kind: Pod
            name: wordpress
            namespace: default
            image: wordpress
          register: wordpress_pod

    - name: Create services for pods
      become: yes
      remote_user: root
      hosts: "{{ groups['openshift-master'] }}"
      vars:
        openshift_url: "https://openshift.example.com:8443"
      tasks:
        - name: Create MySQL service
          openshift_v1_service:
            api_url: "{{ openshift_url }}"
            oc_token: "{{ login_result.cookies['oauth_token'] }}"
            oc_username: "{{ openshift_user }}"
            oc_password: "{{ openshift_password }}"
            kind: Service
            name: mysql
            namespace: default
            spec:
              selector:
                name: mysql
              ports:
                - name: mysql
                  protocol: TCP
                  port: 3306
                  targetPort: 3306
          register: mysql_service

        - name: Create WordPress service
          openshift_v1_service:
            api_url: "{{ openshift_url }}"
            oc_token: "{{ login_result.cookies['oauth_token'] }}"
            oc_username: "{{ openshift_user }}"
            oc_password: "{{ openshift_password }}"
            kind: Service
            name: wordpress
            namespace: default
            spec:
              selector:
                name: wordpress
              ports:
                - name: http
                  protocol: TCP
                  port: 80
                  targetPort: 80
          register: wordpress_service


Make sure to replace the placeholders with your own values, such as AWS access key, secret key, region, OpenShift user, password, etc. Also, update the image IDs, security group name, and other relevant details as per your setup.

Additionally, you will need to create separate roles for configuring the OpenShift master and worker nodes, and make sure those roles are properly defined and included in the playbook.

This is just a basic example to demonstrate the usage of Ansible and the `ec2` and `openshift_v1_pod` modules. You can further enhance the script based on your specific requirements and use case.