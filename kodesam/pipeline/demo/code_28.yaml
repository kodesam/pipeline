Certainly! Here's an example of the YAML files to create an ELK cluster deployment with secrets, clusterrole, rolebinding, namespace, deployment, configmap, service, route, and ingress.

1. Create a file named `elk-secrets.yml` with the following content:

```yaml
apiVersion: v1
kind: Secret
metadata:
  name: elk-secrets
  namespace: elk
data:
  username: base64_encoded_username
  password: base64_encoded_password
```

Replace `base64_encoded_username` and `base64_encoded_password` with the base64-encoded values of your ELK credentials.

2. Create a file named `elk-clusterrole.yml` with the following content:

```yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: elk-cluster-role
rules:
  - apiGroups: [""]
    resources: ["pods", "services", "configmaps"]
    verbs: ["get", "watch", "list", "create", "update"]
  # Add more rules as needed
```

3. Create a file named `elk-rolebinding.yml` with the following content:

```yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: elk-cluster-rolebinding
  namespace: elk
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: elk-cluster-role
subjects:
  - kind: ServiceAccount
    name: default
    namespace: elk
```

4. Create a file named `elk-namespace.yml` with the following content:

```yaml
apiVersion: v1
kind: Namespace
metadata:
  name: elk
```

5. Create a file named `elk-deployment.yml` with the following content:

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: elk-deployment
  namespace: elk
spec:
  replicas: 1
  selector:
    matchLabels:
      app: elk
  template:
    metadata:
      labels:
        app: elk
    spec:
      containers:
        - name: elk
          image: ELK_IMAGE_NAME:ELK_IMAGE_TAG
          ports:
            - containerPort: 5601
            - containerPort: 9200
```

Replace `ELK_IMAGE_NAME` and `ELK_IMAGE_TAG` with your preferred ELK image and version.

6. Create a file named `elk-configmap.yml` with the following content:

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: elk-configmap
  namespace: elk
data:
  # Add your ELK configuration here
  elk.yml: |
    ---
```

Add your ELK configuration within the `elk.yml` section.

7. Create a file named `elk-service.yml` with the following content:

```yaml
apiVersion: v1
kind: Service
metadata:
  name: elk-service
  namespace: elk
spec:
  selector:
    app: elk
  ports:
    - protocol: TCP
      port: 80
      targetPort: 5601
      name: kibana
    - protocol: TCP
      port: 9200
      targetPort: 9200
      name: elasticsearch
  type: ClusterIP
```

8. Create a file named `elk-route.yml` with the following content:

```yaml
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: elk-route
  namespace: elk
spec:
  to:
    kind: Service
    name: elk-service
  port:
    targetPort: kibana
  wildcardPolicy: None
```

9. Create a file named `elk-ingress.yml` with the following content:

```yaml
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: elk-ingress
  namespace: elk
spec:
  rules:
    - host: elk.example.com # Replace with your desired domain
      http:
        paths:
          - path: /
            backend:
              serviceName: elk-service
              servicePort: 5601
```

Replace `elk.example.com` with your desired domain.

You can apply these YAML files using the `kubectl apply -f` command.
For example:

```shell
kubectl apply -f elk-secrets.yml
kubectl apply -f elk-clusterrole.yml
kubectl apply -f elk-rolebinding.yml
kubectl apply -f elk-namespace.yml
kubectl apply -f elk-deployment.yml
kubectl apply -f elk-configmap.yml
kubectl apply -f elk-service.yml
kubectl apply -f elk-route.yml
kubectl apply -f elk-ingress.yml
```

Make sure you have `kubectl` installed and configured to manage your cluster. Adjust the YAML files as per your needs and replace the placeholder values with your desired configurations.