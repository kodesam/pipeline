Here is an example of a shell script that checks the permission, ownership of a file/directory, and parameter checks from a file:

```bash
#!/bin/bash

# Function to check file permissions
check_permissions() {
  file="$1"
  permissions="$2"
  actual_permissions=$(stat -c '%A' "$file")
  if [[ "$actual_permissions" != "$permissions" ]]; then
    echo "File $file does not have the expected permissions: $permissions"
  fi
}

# Function to check file ownership
check_ownership() {
  file="$1"
  owner="$2"
  actual_owner=$(stat -c '%U' "$file")
  if [[ "$actual_owner" != "$owner" ]]; then
    echo "File $file is not owned by $owner"
  fi
}

# Function to perform parameter checks
check_parameters() {
  file="$1"
  parameter_file="$2"
  while IFS= read -r parameter; do
    grep -q "$parameter" "$file"
    if [[ $? -ne 0 ]]; then
      echo "Parameter $parameter not found in $file"
    fi
  done < "$parameter_file"
}

# Main script

# Check file permissions and ownership
check_permissions "/path/to/file.txt" "rw-r--r--"
check_ownership "/path/to/file.txt" "user"

# Perform parameter checks
check_parameters "/path/to/file.txt" "/path/to/parameters.txt"
```

In this script, three functions are defined:
- `check_permissions` checks the permissions of a given file/directory against the expected permissions.
- `check_ownership` checks the ownership of a given file/directory against the expected owner.
- `check_parameters` checks the presence of specific parameters in a given file, using a parameter file as a reference.

To use the script, replace `/path/to/file.txt` and `/path/to/parameters.txt` with the actual paths of the file you want to check permissions/ownership and the parameter file, respectively.

Save the script as a file (e.g., `check_file.sh`), make it executable (`chmod +x check_file.sh`), and run it using `./check_file.sh`. The script will output any discrepancies found in permissions, ownership, or missing parameters.