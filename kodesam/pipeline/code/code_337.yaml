Sure! Here is an example of a YAML file that creates an ELK (Elasticsearch, Logstash, and Kibana) application pod in Kubernetes, including namespace, deployment, secrets, configmap, service, and route.

```
# Create the namespace
apiVersion: v1
kind: Namespace
metadata:
  name: elk-namespace

---

# Create the secrets
apiVersion: v1
kind: Secret
metadata:
  name: elk-secrets
  namespace: elk-namespace
data:
  # Base64-encoded values for your secrets
  elasticsearch_username: <base64-encoded-value>
  elasticsearch_password: <base64-encoded-value>
  kibana_username: <base64-encoded-value>
  kibana_password: <base64-encoded-value>

---

# Create the configmap
apiVersion: v1
kind: ConfigMap
metadata:
  name: elk-configmap
  namespace: elk-namespace
data:
  logstash.conf: |
    # Put your Logstash configuration here

---

# Create the deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: elk-deployment
  namespace: elk-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: elk
  template:
    metadata:
      labels:
        app: elk
    spec:
      containers:
        - name: elasticsearch
          image: elasticsearch:7.8.1
          ports:
            - containerPort: 9200
        - name: logstash
          image: logstash:7.8.1
          ports:
            - containerPort: 5000
          volumeMounts:
            - name: logstash-config
              mountPath: /usr/share/logstash/pipeline
        - name: kibana
          image: kibana:7.8.1
          ports:
            - containerPort: 5601
      volumes:
        - name: logstash-config
          configMap:
            name: elk-configmap

---

# Create the service
apiVersion: v1
kind: Service
metadata:
  name: elk-service
  namespace: elk-namespace
spec:
  ports:
    - name: elasticsearch
      port: 9200
      targetPort: 9200
    - name: logstash
      port: 5000
      targetPort: 5000
    - name: kibana
      port: 5601
      targetPort: 5601
  selector:
    app: elk

---

# Create the route
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: elk-route
  namespace: elk-namespace
spec:
  to:
    kind: Service
    name: elk-service
  tls:
    termination: edge
```

You can save this YAML file to a `.yaml` or `.yml` file, then use the `kubectl apply -f <filename>` command to create the ELK application in your Kubernetes cluster. Make sure you have the `kubectl` command line tool installed and configured to connect to your Kubernetes cluster before running the command.