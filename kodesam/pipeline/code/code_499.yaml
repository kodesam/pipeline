To include location-generic variables in Jinja format in an Ansible playbook, you can use the `vars_files` directive to include external variable files and define the variables specific to each location. Here's an example:

```yaml
- hosts: your_hosts
  vars_files:
    - location_variables/{{ location }}.yml

  tasks:
    # Rest of your tasks go here
```

In the above playbook, the `location` variable is used to specify the location-specific variables file. It is assumed that you have a directory called `location_variables` that contains individual YAML files for each location, named based on the location name (e.g., `location1.yml`, `location2.yml`, etc.).

The `vars_files` directive includes the appropriate location-specific variables file based on the value of the `location` variable. For example, if `location` is set to "location1", it will include the `location_variables/location1.yml` file.

Inside the location-specific variables file, you can define the variables specific to that location in Jinja format. Here's an example of how the `location1.yml` file may look:

```yaml
---
my_variable: "value1"
another_variable: "value2"
```

In this example, the `my_variable` and `another_variable` variables are defined with their corresponding values.

After including the location-specific variables file, these variables will be available for use in the playbook tasks. You can reference them using the regular Ansible variable syntax, such as `{{ my_variable }}` or `{{ another_variable }}`.

By organizing your location-specific variable files in this way, you can easily manage and configure different sets of variables for different locations in a structured and maintainable manner.