To create a Dockerfile for an Ansible container, you can follow these steps:

1. Start by creating a new file called "Dockerfile" in a directory of your choice.

2. In the Dockerfile, start with the base image. For an Ansible container, you can use an image like "python" or "alpine" as your base image. For example, to use the "python" image:

```
FROM python:latest
```

3. Next, install Ansible and its dependencies. This can be done using the `RUN` command in your Dockerfile. For example, to install Ansible using `pip`:

```
RUN pip install ansible
```

4. Optionally, you can copy your Ansible playbooks, inventory files, and other necessary files to the container. This can be done using the `COPY` command. For example, if you have a directory called "ansible" with your playbooks and inventory files:

```
COPY ansible /ansible
```

5. Optionally, you can set the working directory to the location where your Ansible files are copied. Use the `WORKDIR` command to set the working directory. For example:

```
WORKDIR /ansible
```

6. Optionally, you can define the entry point for the container. This can be done using the `ENTRYPOINT` command. For example, to run an Ansible playbook named "site.yml" when the container starts:

```
ENTRYPOINT ["ansible-playbook", "site.yml"]
```

Note: The above command assumes that your Ansible files are copied to the container and the working directory is set to the correct location.

7. Save the Dockerfile.

You can now build your container image using the Dockerfile:

```
docker build -t my-ansible-container .
```

Replace "my-ansible-container" with a name of your choice for the container image.

Once the image is built, you can run a container based on this image using the `docker run` command, providing any additional configuration or command needed for your specific Ansible use case.

Please note that this is a basic example, and you may need to modify it based on your specific requirements. Additionally, you may need to configure further settings based on your playbook requirements, such as providing inventory files or additional dependencies.