Sure! Here's an example of a YAML script for creating a web application pod with a namespace, deployment, secrets, configmap, service, and route:

```yaml
# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: my-namespace

---

# Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-app-deployment
  namespace: my-namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: my-app
  template:
    metadata:
      labels:
        app: my-app
    spec:
      containers:
        - name: my-app-container
          image: my-app-image
          ports:
            - containerPort: 8080

---

# Secrets
apiVersion: v1
kind: Secret
metadata:
  name: my-app-secrets
  namespace: my-namespace
data:
  username: <base64-encoded-username>
  password: <base64-encoded-password>

---

# ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-app-config
  namespace: my-namespace
data:
  config1: value1
  config2: value2

---

# Service
apiVersion: v1
kind: Service
metadata:
  name: my-app-service
  namespace: my-namespace
spec:
  selector:
    app: my-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080

---

# Route
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: my-app-route
  namespace: my-namespace
spec:
  to:
    kind: Service
    name: my-app-service
  port:
    targetPort: 80
```

You can save this script to a file with a `.yaml` extension and apply it to your Kubernetes cluster using the `kubectl apply -f <filename.yaml>` command. Make sure to replace `<base64-encoded-username>` and `<base64-encoded-password>` with the actual base64-encoded values for your secrets.