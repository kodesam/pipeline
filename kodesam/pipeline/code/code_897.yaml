Sure! Here's an example of a Kubernetes YAML file that creates a web application pod with a namespace, deployment, secrets, configmap, service, and route:

```yaml
apiVersion: v1
kind: Namespace
metadata:
  name: your-namespace

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: your-deployment
  namespace: your-namespace
spec:
  replicas: 3
  selector:
    matchLabels:
      app: your-app
  template:
    metadata:
      labels:
        app: your-app
    spec:
      containers:
      - name: your-app
        image: your-image
        ports:
        - containerPort: 8080

---

apiVersion: v1
kind: Secret
metadata:
  name: your-secret
  namespace: your-namespace
data:
  username: your-username
  password: your-password

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: your-configmap
  namespace: your-namespace
data:
  config: your-config-data

---

apiVersion: v1
kind: Service
metadata:
  name: your-service
  namespace: your-namespace
spec:
  selector:
    app: your-app
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: your-ingress
  namespace: your-namespace
spec:
  tls:
    - hosts:
        - your-host
      secretName: your-tls-secret
  rules:
    - host: your-host
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: your-service
                port:
                  number: 8080
```

Make sure to replace the placeholders (e.g., `your-namespace`, `your-deployment`, `your-app`, etc.) with your actual values. Once you have the YAML file, you can apply it using the `kubectl apply -f <filename>.yaml` command.